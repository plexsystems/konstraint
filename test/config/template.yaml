apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: config
spec:
  crd:
    spec:
      names:
        kind: Config
  targets:
  - libs:
    - |
      package lib.core

      format(msg) = {"msg": msg} {
          true
      }
    rego: |
      package policy

      import data.lib.core

      violation[msg] {
          core.kind == "Deployment"
          not service_selector_exists

          msg := core.format(sprintf("%s/%s: No service exists with same selectors", [core.kind, core.name]))
      }

      service_selector_exists {
          services := data.inventory.namespace[core.resource.metadata.namespace]["v1"]["Service"][_]

          core.resource.spec.template.metadata.labels == services.spec.selector
      }
    target: admission.k8s.gatekeeper.sh
status: {}
