apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: pspdenyhostalias
spec:
  crd:
    spec:
      names:
        kind: PspDenyHostAlias
  targets:
  - libs:
    - |-
      package lib.core

      default is_gatekeeper := false

      is_gatekeeper {
        has_field(input, "review")
        has_field(input.review, "object")
      }

      resource := input.review.object {
        is_gatekeeper
      }

      resource := input {
        not is_gatekeeper
      }

      format(msg) := {"msg": msg}

      format_with_id(msg, id) := {
        "msg": sprintf("%s: %s", [id, msg]),
        "details": {"policyID": id},
      }

      apiVersion := resource.apiVersion

      name := resource.metadata.name

      kind := resource.kind

      labels := resource.metadata.labels

      annotations := resource.metadata.annotations

      gv := split(apiVersion, "/")

      group := gv[0] {
        contains(apiVersion, "/")
      }

      group := "core" {
        not contains(apiVersion, "/")
      }

      version := gv[count(gv) - 1]

      has_field(obj, field) {
        not object.get(obj, field, "N_DEFINED") == "N_DEFINED"
      }

      missing_field(obj, field) {
        obj[field] == ""
      }

      missing_field(obj, field) {
        not has_field(obj, field)
      }
    - |-
      package lib.psps

      import data.lib.core

      is_exception {
        exceptions := {
          "gce.privileged", # GKE
          "gce.persistent-volume-binder", # GKE
          "gce.event-exporter", # GKE
          "gce.gke-metrics-agent", # GKE
          "gce.unprivileged-addon", # GKE
          "gce.fluentd-gke", # GKE
          "gce.fluentd-gcp", # GKE
        }

        core.name == exceptions[_]
      }

      psps[psp] {
        lower(core.kind) = "podsecuritypolicy"
        not is_exception
        psp = core.resource
      }
    rego: |-
      package psp_deny_host_alias

      import data.lib.core
      import data.lib.psps

      policyID := "P1011"

      violation[msg] {
        psp_allows_hostaliases

        msg := core.format_with_id(sprintf("%s/%s: Allows for managing host aliases", [core.kind, core.name]), policyID)
      }

      psp_allows_hostaliases {
        psps.psps[_].spec.hostAliases
      }
    target: admission.k8s.gatekeeper.sh
status: {}
