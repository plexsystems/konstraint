apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: containerdenywithoutresourceconstraints
spec:
  crd:
    spec:
      names:
        kind: ContainerDenyWithoutResourceConstraints
  targets:
  - libs:
    - |
      package lib.core

      default is_gatekeeper = false

      is_gatekeeper {
          has_field(input, "review")
          has_field(input.review, "object")
      }

      resource = input.review.object {
          is_gatekeeper
      }

      resource = input {
          not is_gatekeeper
      }

      format(msg) = msg {
          not is_gatekeeper
      }

      format(msg) = {"msg": msg} {
          is_gatekeeper
      }

      apiVersion = resource.apiVersion
      name = resource.metadata.name
      kind = resource.kind
      labels = resource.metadata.labels
      annotations = resource.metadata.annotations

      has_field(obj, field) {
          not object.get(obj, field, "N_DEFINED") == "N_DEFINED"
      }

      missing_field(obj, field) = true {
          obj[field] == ""
      }

      missing_field(obj, field) = true {
          not has_field(obj, field)
      }
    - |
      package lib.containers

      import data.lib.core
      import data.lib.pods

      pod_containers(pod) = all_containers {
          keys = {"containers", "initContainers"}
          all_containers = [c | keys[k]; c = pod.spec[k][_]]
      }

      containers[container] {
          pods.pods[pod]
          all_containers = pod_containers(pod)
          container = all_containers[_]
      }

      containers[container] {
          all_containers = pod_containers(core.resource)
          container = all_containers[_]
      }

      is_workload {
          containers[_]
      }
    - |
      package lib.pods

      import data.lib.core

      pods[pod] {
          lower(core.kind) == "statefulset"
          pod = core.resource.spec.template
      }

      pods[pod] {
          lower(core.kind) == "daemonset"
          pod = core.resource.spec.template
      }

      pods[pod] {
          lower(core.kind) == "deployment"
          pod = core.resource.spec.template
      }

      pods[pod] {
          lower(core.kind) == "pod"
          pod = core.resource
      }

      pods[pod] {
          lower(core.kind) == "job"
          pod = core.resource.spec.template
      }

      volumes[volume] {
          pods[pod]
          volume = pod.spec.volumes[_]
      }
    rego: |
      package container_deny_without_resource_constraints

      import data.lib.core
      import data.lib.containers

      violation[msg] {
          containers.containers[container]
          not container_resources_provided(container)

          msg := core.format(sprintf("%s/%s/%s: Container resource constraints must be specified", [core.kind, core.name, container.name]))
      }

      container_resources_provided(container) {
          container.resources.requests.cpu
          container.resources.requests.memory
          container.resources.limits.cpu
          container.resources.limits.memory
      }
    target: admission.k8s.gatekeeper.sh
status: {}
