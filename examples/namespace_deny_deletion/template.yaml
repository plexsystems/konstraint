apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: namespacedenydeletion
spec:
  crd:
    spec:
      names:
        kind: NamespaceDenyDeletion
  targets:
  - libs:
    - |-
      package lib.core

      import future.keywords.if

      default is_gatekeeper := false

      is_gatekeeper if {
        has_field(input, "review")
        has_field(input.review, "object")
      }

      is_gatekeeper if {
        has_field(input, "review")
        has_field(input.review, "oldObject")
      }

      resource := input.review.object if {
        is_gatekeeper
        has_field(input.review, "object")
      }

      else := input.review.oldObject if {
        is_gatekeeper
        has_field(input.review, "oldObject")
      }

      else := input if {
        not is_gatekeeper
      }

      format(msg) := {"msg": msg}

      format_with_id(msg, id) := {
        "msg": sprintf("%s: %s", [id, msg]),
        "details": {"policyID": id},
      }

      apiVersion := resource.apiVersion

      name := resource.metadata.name

      kind := resource.kind

      labels := resource.metadata.labels

      annotations := resource.metadata.annotations

      operation := input.review.operation if {
        is_gatekeeper
      } else := input.operation if {
        not is_gatekeeper
      }

      gv := split(apiVersion, "/")

      group := gv[0] if {
        contains(apiVersion, "/")
      }

      group := "core" if {
        not contains(apiVersion, "/")
      }

      version := gv[count(gv) - 1]

      has_field(obj, field) if {
        not object.get(obj, field, "N_DEFINED") == "N_DEFINED"
      }

      missing_field(obj, field) if {
        obj[field] == ""
      }

      missing_field(obj, field) if {
        not has_field(obj, field)
      }
    rego: |-
      package namespace_deny_delete

      import data.lib.core
      import future.keywords.contains
      import future.keywords.if
      import future.keywords.if

      policyID := "P2007"

      violation contains msg if {
        core.kind == "Namespace"
        core.operation == "DELETE"
        not allow_namespace_deletion

        msg := core.format_with_id(sprintf("%s/%s: Deletion of Namespace is not allowed", [core.kind, core.name]), policyID)
      }

      allow_namespace_deletion if {
        core.annotations["allow-deletion"] == "true"
      }
    target: admission.k8s.gatekeeper.sh
status: {}
