apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: pspdenyaddedcaps
spec:
  crd:
    spec:
      names:
        kind: PspDenyAddedCaps
  targets:
  - libs:
    - |-
      package lib.core

      default is_gatekeeper = false

      is_gatekeeper {
          has_field(input, "review")
          has_field(input.review, "object")
      }

      resource = input.review.object {
          is_gatekeeper
      }

      resource = input {
          not is_gatekeeper
      }

      format(msg) = {"msg": msg} {
          true
      }

      format_with_id(msg, id) = msg_fmt {
          msg_fmt := {
              "msg": sprintf("%s: %s", [id, msg]),
              "details": {"policyID": id}
          }
      }

      apiVersion = resource.apiVersion
      name = resource.metadata.name
      kind = resource.kind
      labels = resource.metadata.labels
      annotations = resource.metadata.annotations

      has_field(obj, field) {
          not object.get(obj, field, "N_DEFINED") == "N_DEFINED"
      }

      missing_field(obj, field) = true {
          obj[field] == ""
      }

      missing_field(obj, field) = true {
          not has_field(obj, field)
      }
    - |-
      package lib.psps

      import data.lib.core

      is_exception {
          exceptions := {
              "gce.privileged",               # GKE
              "gce.persistent-volume-binder", # GKE
              "gce.event-exporter",           # GKE
              "gce.gke-metrics-agent",        # GKE
              "gce.unprivileged-addon",       # GKE
              "gce.fluentd-gke",              # GKE
              "gce.fluentd-gcp"               # GKE
          }
          core.name == exceptions[_]
      }

      psps[psp] {
          lower(core.kind) = "podsecuritypolicy"
          not is_exception
          psp = core.resource
      }
    - |-
      package lib.security

      dropped_capability(container, cap) {
          lower(container.securityContext.capabilities.drop[_]) == lower(cap)
      }

      dropped_capability(psp, cap) {
          lower(psp.spec.requiredDropCapabilities[_]) == lower(cap)
      }

      added_capability(container, cap) {
          lower(container.securityContext.capabilities.add[_]) == lower(cap)
      }

      added_capability(psp, cap) {
          lower(psp.spec.allowedCapabilities[_]) == lower(cap)
      }

      added_capability(psp, cap) {
          lower(psp.spec.defaultAddCapabilities[_]) == lower(cap)
      }
    rego: |-
      package psp_deny_added_caps

      import data.lib.core
      import data.lib.psps
      import data.lib.security

      policyID := "P1009"

      violation[msg] {
          not psp_dropped_all_capabilities

          msg := core.format_with_id(sprintf("%s/%s: Does not require droping all capabilities", [core.kind, core.name]), policyID)
      }

      psp_dropped_all_capabilities {
          psps.psps[psp]
          security.dropped_capability(psp, "all")
      }
    target: admission.k8s.gatekeeper.sh
status: {}
