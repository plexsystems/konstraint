apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: roledenyuseprivilegedpsps
spec:
  crd:
    spec:
      names:
        kind: RoleDenyUsePrivilegedPsps
  targets:
  - libs:
    - |-
      package lib.core

      import future.keywords.if

      default is_gatekeeper := false

      is_gatekeeper if {
        has_field(input, "review")
        has_field(input.review, "object")
      }

      is_gatekeeper if {
        has_field(input, "review")
        has_field(input.review, "oldObject")
      }

      resource := input.review.object if {
        is_gatekeeper
        has_field(input.review, "object")
      }

      else := input.review.oldObject if {
        is_gatekeeper
        has_field(input.review, "oldObject")
      }

      else := input if {
        not is_gatekeeper
      }

      format(msg) := {"msg": msg}

      format_with_id(msg, id) := {
        "msg": sprintf("%s: %s", [id, msg]),
        "details": {"policyID": id},
      }

      apiVersion := resource.apiVersion

      name := resource.metadata.name

      kind := resource.kind

      labels := resource.metadata.labels

      annotations := resource.metadata.annotations

      operation := input.review.operation if {
        is_gatekeeper
      } else := input.operation if {
        not is_gatekeeper
      }

      gv := split(apiVersion, "/")

      group := gv[0] if {
        contains(apiVersion, "/")
      }

      group := "core" if {
        not contains(apiVersion, "/")
      }

      version := gv[count(gv) - 1]

      has_field(obj, field) if {
        not object.get(obj, field, "N_DEFINED") == "N_DEFINED"
      }

      missing_field(obj, field) if {
        obj[field] == ""
      }

      missing_field(obj, field) if {
        not has_field(obj, field)
      }
    - |-
      package lib.rbac

      import future.keywords.if
      import future.keywords.in

      import data.lib.core

      rule_has_verb(rule, verb) if {
        verbs := ["*", lower(verb)]
        verbs[_] == lower(rule.verbs[_])
      }

      rule_has_resource_type(rule, type) if {
        types := ["*", lower(type)]
        types[_] == lower(rule.resources[_])
      }

      rule_has_resource_name(rule, name) if {
        name in rule.resourceNames
      }

      rule_has_resource_name(rule, _) if {
        core.missing_field(rule, "resourceNames")
      }
    - |-
      package lib.security

      import future.keywords.if

      dropped_capability(container, cap) if {
        lower(container.securityContext.capabilities.drop[_]) == lower(cap)
      }

      dropped_capability(psp, cap) if {
        lower(psp.spec.requiredDropCapabilities[_]) == lower(cap)
      }

      added_capability(container, cap) if {
        lower(container.securityContext.capabilities.add[_]) == lower(cap)
      }

      added_capability(psp, cap) if {
        lower(psp.spec.allowedCapabilities[_]) == lower(cap)
      }

      added_capability(psp, cap) if {
        lower(psp.spec.defaultAddCapabilities[_]) == lower(cap)
      }
    rego: |-
      package role_deny_use_privileged_psps

      import data.lib.core
      import data.lib.rbac
      import data.lib.security
      import future.keywords.contains
      import future.keywords.if

      policyID := "P2005"

      violation contains msg if {
        role_uses_privileged_psp

        msg := core.format_with_id(
          sprintf("%s/%s: Allows using PodSecurityPolicies with privileged permissions", [core.kind, core.name]),
          policyID,
        )
      }

      role_uses_privileged_psp if {
        rule := core.resource.rules[_]
        rbac.rule_has_resource_type(rule, "podsecuritypolicies")
        rbac.rule_has_verb(rule, "use")
        rbac.rule_has_resource_name(rule, privileged_psps[_].metadata.name)
      }

      privileged_psps contains psp if {
        psp := data.inventory.cluster["policy/v1beta1"].PodSecurityPolicy[_]
        psp_is_privileged(psp)
      }

      psp_is_privileged(psp) if {
        psp.spec.privileged
      }

      psp_is_privileged(psp) if {
        security.added_capability(psp, "SYS_ADMIN")
      }
    target: admission.k8s.gatekeeper.sh
status: {}
