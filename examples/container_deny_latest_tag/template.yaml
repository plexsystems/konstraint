apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: containerdenylatesttag
spec:
  crd:
    spec:
      names:
        kind: ContainerDenyLatestTag
  targets:
  - libs:
    - |-
      package lib.core

      import future.keywords.if

      default is_gatekeeper := false

      is_gatekeeper if {
        has_field(input, "review")
        has_field(input.review, "object")
      }

      is_gatekeeper if {
        has_field(input, "review")
        has_field(input.review, "oldObject")
      }

      resource := input.review.object if {
        is_gatekeeper
        has_field(input.review, "object")
      }

      else := input.review.oldObject if {
        is_gatekeeper
        has_field(input.review, "oldObject")
      }

      else := input if {
        not is_gatekeeper
      }

      format(msg) := {"msg": msg}

      format_with_id(msg, id) := {
        "msg": sprintf("%s: %s", [id, msg]),
        "details": {"policyID": id},
      }

      apiVersion := resource.apiVersion

      name := resource.metadata.name

      kind := resource.kind

      labels := resource.metadata.labels

      annotations := resource.metadata.annotations

      operation := input.review.operation if {
        is_gatekeeper
      } else := input.operation if {
        not is_gatekeeper
      }

      gv := split(apiVersion, "/")

      group := gv[0] if {
        contains(apiVersion, "/")
      }

      group := "core" if {
        not contains(apiVersion, "/")
      }

      version := gv[count(gv) - 1]

      has_field(obj, field) if {
        not object.get(obj, field, "N_DEFINED") == "N_DEFINED"
      }

      missing_field(obj, field) if {
        obj[field] == ""
      }

      missing_field(obj, field) if {
        not has_field(obj, field)
      }
    - |-
      package lib.pods

      import future.keywords.contains
      import future.keywords.if

      import data.lib.core

      default pod := false

      pod := core.resource.spec.template if {
        pod_templates := ["daemonset", "deployment", "job", "replicaset", "replicationcontroller", "statefulset"]
        lower(core.kind) == pod_templates[_]
      }

      pod := core.resource if {
        lower(core.kind) == "pod"
      }

      pod := core.resource.spec.jobTemplate.spec.template if {
        lower(core.kind) == "cronjob"
      }

      containers contains container if {
        keys := {"containers", "initContainers"}
        all_containers := [c | some k; keys[k]; c = pod.spec[k][_]]
        container := all_containers[_]
      }

      volumes contains pod.spec.volumes[_]
    rego: |-
      package container_deny_latest_tag

      import data.lib.core
      import data.lib.pods
      import future.keywords.contains
      import future.keywords.if

      policyID := "P2001"

      violation contains msg if {
        some container
        pods.containers[container]
        has_latest_tag(container)

        msg := core.format_with_id(
          sprintf("%s/%s/%s: Images must not use the latest tag", [core.kind, core.name, container.name]),
          policyID,
        )
      }

      has_latest_tag(c) if {
        endswith(c.image, ":latest")
      }

      has_latest_tag(c) if {
        contains(c.image, ":") == false
      }
    target: admission.k8s.gatekeeper.sh
status: {}
