apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: pspdenyaddedcaps
spec:
  crd:
    spec:
      names:
        kind: PspDenyAddedCaps
  targets:
  - libs:
    - |-
      package lib.core

      import future.keywords.if

      default is_gatekeeper := false

      is_gatekeeper if {
        has_field(input, "review")
        has_field(input.review, "object")
      }

      is_gatekeeper if {
        has_field(input, "review")
        has_field(input.review, "oldObject")
      }

      resource := input.review.object if {
        is_gatekeeper
        has_field(input.review, "object")
      }

      else := input.review.oldObject if {
        is_gatekeeper
        has_field(input.review, "oldObject")
      }

      else := input if {
        not is_gatekeeper
      }

      format(msg) := {"msg": msg}

      format_with_id(msg, id) := {
        "msg": sprintf("%s: %s", [id, msg]),
        "details": {"policyID": id},
      }

      apiVersion := resource.apiVersion

      name := resource.metadata.name

      kind := resource.kind

      labels := resource.metadata.labels

      annotations := resource.metadata.annotations

      operation := input.review.operation if {
        is_gatekeeper
      } else := input.operation if {
        not is_gatekeeper
      }

      gv := split(apiVersion, "/")

      group := gv[0] if {
        contains(apiVersion, "/")
      }

      group := "core" if {
        not contains(apiVersion, "/")
      }

      version := gv[count(gv) - 1]

      has_field(obj, field) if {
        not object.get(obj, field, "N_DEFINED") == "N_DEFINED"
      }

      missing_field(obj, field) if {
        obj[field] == ""
      }

      missing_field(obj, field) if {
        not has_field(obj, field)
      }
    - |-
      package lib.psps

      import data.lib.core
      import future.keywords.contains
      import future.keywords.if
      import future.keywords.in

      is_exception if {
        exceptions := {
          "gce.privileged", # GKE
          "gce.persistent-volume-binder", # GKE
          "gce.event-exporter", # GKE
          "gce.gke-metrics-agent", # GKE
          "gce.unprivileged-addon", # GKE
          "gce.fluentd-gke", # GKE
          "gce.fluentd-gcp", # GKE
        }

        core.name in exceptions
      }

      psps contains psp if {
        lower(core.kind) = "podsecuritypolicy"
        not is_exception
        psp = core.resource
      }
    - |-
      package lib.security

      import future.keywords.if

      dropped_capability(container, cap) if {
        lower(container.securityContext.capabilities.drop[_]) == lower(cap)
      }

      dropped_capability(psp, cap) if {
        lower(psp.spec.requiredDropCapabilities[_]) == lower(cap)
      }

      added_capability(container, cap) if {
        lower(container.securityContext.capabilities.add[_]) == lower(cap)
      }

      added_capability(psp, cap) if {
        lower(psp.spec.allowedCapabilities[_]) == lower(cap)
      }

      added_capability(psp, cap) if {
        lower(psp.spec.defaultAddCapabilities[_]) == lower(cap)
      }
    rego: |-
      package psp_deny_added_caps

      import data.lib.core
      import data.lib.psps
      import data.lib.security
      import future.keywords.contains
      import future.keywords.if

      policyID := "P1009"

      violation contains msg if {
        not psp_dropped_all_capabilities

        msg := core.format_with_id(
          sprintf("%s/%s: Does not require droping all capabilities", [core.kind, core.name]),
          policyID,
        )
      }

      psp_dropped_all_capabilities if {
        some psp
        psps.psps[psp]
        security.dropped_capability(psp, "all")
      }
    target: admission.k8s.gatekeeper.sh
status: {}
