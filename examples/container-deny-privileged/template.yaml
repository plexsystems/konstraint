apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: denyprivilegedcontainers
spec:
  crd:
    spec:
      names:
        kind: DenyPrivilegedContainers
  targets:
  - libs:
    - |
      package lib.core

      default is_gatekeeper = false

      is_gatekeeper {
        has_field(input, "review")
        has_field(input.review, "object")
      }

      resource = input {
        not is_gatekeeper
      }

      resource = input.review.object {
        is_gatekeeper
      }

      apiVersion = resource.apiVersion
      kind = resource.kind
      name = resource.metadata.name
      labels = resource.metadata.labels

      format(msg) = gatekeeper_format {
        is_gatekeeper
        gatekeeper_format = {"msg": msg}
      }

      format(msg) = msg {
        not is_gatekeeper
      }

      has_field(obj, field) {
        obj[field]
      }

      missing_field(obj, field) = true {
        obj[field] == ""
      }

      missing_field(obj, field) = true {
        not has_field(obj, field)
      }
    - |
      package lib.workloads

      import data.lib.core

      is_statefulset {
        lower(core.kind) == "statefulset"
      }

      is_daemonset {
        lower(core.kind) == "daemonset"
      }

      is_deployment {
        lower(core.kind) == "deployment"
      }

      is_pod {
        lower(core.kind) == "pod"
      }

      is_workload {
        containers[_]
      }

      pods[pod] {
        is_statefulset
        pod = core.resource.spec.template
      }

      pods[pod] {
        is_daemonset
        pod = core.resource.spec.template
      }

      pods[pod] {
        is_deployment
        pod = core.resource.spec.template
      }

      pods[pod] {
        is_pod
        pod = core.resource
      }

      volumes[volume] {
        pods[pod]
        volume = pod.spec.volumes[_]
      }

      pod_containers(pod) = all_containers {
        keys = {"containers", "initContainers"}
        all_containers = [c | keys[k]; c = pod.spec[k][_]]
      }

      containers[container] {
        pods[pod]
        all_containers = pod_containers(pod)
        container = all_containers[_]
      }

      containers[container] {
        all_containers = pod_containers(core.object)
        container = all_containers[_]
      }
    - |
      package lib.security

      dropped_capability(container, cap) {
        container.securityContext.capabilities.drop[_] == cap
      }

      added_capability(container, cap) {
        container.securityContext.capabilities.add[_] == cap
      }

      dropped_capability(psp, cap) {
        psp.spec.capabilities.drop[_] == cap
      }

      added_capability(psp, cap) {
        psp.spec.capabilities.add[_] == cap
      }
    rego: |
      package deny_privileged_containers

      import data.lib.core
      import data.lib.workloads
      import data.lib.security


      violation[msg] {
        workloads.containers[container]
        is_privileged(container)

        msg = core.format(sprintf("(%s) %s: Containers are not allowed to run as privileged", [core.kind, core.name]))
      }

      is_privileged(container) {
        container.securityContext.privileged
      }

      is_privileged(container) {
        security.added_capability(container, "CAP_SYS_ADMIN")
      }
    target: admission.k8s.gatekeeper.sh
status: {}
