apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: containerdenylatesttag
spec:
  crd:
    spec:
      names:
        kind: ContainerDenyLatestTag
  targets:
  - libs:
    - |
      package lib.core

      default is_gatekeeper = false

      is_gatekeeper {
          has_field(input, "review")
          has_field(input.review, "object")
      }

      resource = input.review.object {
          is_gatekeeper
      }

      resource = input {
          not is_gatekeeper
      }

      format(msg) = msg {
          not is_gatekeeper
      }

      format(msg) = {"msg": msg} {
          is_gatekeeper
      }

      apiVersion = resource.apiVersion
      name = resource.metadata.name
      kind = resource.kind
      labels = resource.metadata.labels
      annotations = resource.metadata.annotations

      has_field(obj, field) {
          not object.get(obj, field, "N_DEFINED") == "N_DEFINED"
      }

      missing_field(obj, field) = true {
          obj[field] == ""
      }

      missing_field(obj, field) = true {
          not has_field(obj, field)
      }
    - |
      package lib.pods

      import data.lib.core

      default pod = false

      pod = core.resource.spec.template {
          pod_templates := ["daemonset","deployment","job","replicaset","replicationcontroller","statefulset"]
          lower(core.kind) == pod_templates[_]
      }

      pod = core.resource {
          lower(core.kind) == "pod"
      }

      pod = core.resource.spec.jobTemplate.spec.template {
          lower(core.kind) == "cronjob"
      }

      containers[container] {
          keys = {"containers", "initContainers"}
          all_containers = [c | keys[k]; c = pod.spec[k][_]]
          container = all_containers[_]
      }

      volumes[volume] {
          volume = pod.spec.volumes[_]
      }
    rego: |
      package container_deny_latest_tag

      import data.lib.core
      import data.lib.pods

      violation[msg] {
          pods.containers[container]
          has_latest_tag(container)

          msg := core.format(sprintf("%s/%s/%s: Images must not use the latest tag", [core.kind, core.name, container.name]))
      }

      has_latest_tag(c) {
          endswith(c.image, ":latest")
      }

      has_latest_tag(c) {
          contains(c.image, ":") == false
      }
    target: admission.k8s.gatekeeper.sh
status: {}
